rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isPlayer(game) {
      return request.auth.uid in game.gameState.players.map(p => p.id);
    }

    // Rules for accessing the main game document
    match /artifacts/{appId}/public/data/games/{gameId} {

      // --- READ ---
      // Allow any authenticated player to read the PUBLIC gameState.
      // This rule explicitly DENIES reading the privateState.
      allow get: if isAuthenticated(); // Needed for lobby list
      allow list: if isAuthenticated(); // Needed for lobby list

      // A player can only listen to real-time updates if they are in the game.
      allow onSnapshot: if isPlayer(resource.data);

      // --- CREATE ---
      // A user can create a game if they are authenticated and are the host.
      allow create: if isAuthenticated() && request.resource.data.gameState.host == request.auth.uid;

      // --- UPDATE ---
      // Players in the game can update it. Specific actions are validated below.
      allow update: if isPlayer(resource.data);

      // --- DELETE ---
      // Only the host can delete a game.
      allow delete: if isAuthenticated() && resource.data.gameState.host == request.auth.uid;
    }

    // Rules for accessing specific FIELDS within a game document
    match /artifacts/{appId}/public/data/games/{gameId} {

        // PUBLIC DATA: Anyone authenticated can read these fields.
        allow read: if isAuthenticated();

        // PRIVATE DATA: These rules override the general 'read' rule above.
        match /privateState/playersHands/{playerId} {
          // You can only read your own hand! This is the key security rule.
          allow get: if request.auth.uid == playerId;
        }
    }
  }
}
