rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is a player in the game.
    function isPlayer(game) {
      return request.auth.uid in game.data.gameState.players.map(p => p.id);
    }

    // Rules for the 'games' collection
    match /artifacts/{appId}/public/data/games/{gameId} {

      // --- READ ---
      // Allow any authenticated user to read the list of games (for the lobby).
      allow list, get: if isAuthenticated();

      // --- CREATE ---
      // Anyone who is signed in can create a new game document,
      // as long as they set themselves as the host.
      allow create: if isAuthenticated() && request.resource.data.gameState.host == request.auth.uid;

      // --- UPDATE ---
      // Only players who are actually in the game are allowed to make changes to it.
      allow update: if isPlayer(get(/databases/$(database)/documents/$(request.path)));

      // --- DELETE ---
      // Only the host of the game can delete it.
      allow delete: if isAuthenticated() && resource.data.gameState.host == request.auth.uid;
    }

    // Rules for accessing the private hands within a game
    match /artifacts/{appId}/public/data/games/{gameId}/privateState/playersHands/{playerId} {
        // --- READ ---
        // A player can only read their own hand. This is the most critical rule to prevent cheating.
        allow get: if isAuthenticated() && request.auth.uid == playerId;
    }
  }
}
