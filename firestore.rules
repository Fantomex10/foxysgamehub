rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules more readable
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }

    function getGameData() {
      return resource.data;
    }

    function getIncomingGameData() {
      return request.resource.data;
    }

    // Rules for the 'games' collection
    match /games/{gameId} {

      // --- READ ---
      // Any authenticated user can read game data.
      // This is necessary for the lobby to see open games and for players to see game state.
      allow read: if isAuthenticated();

      // --- CREATE ---
      // A user can create a new game if they are authenticated and they are setting themselves as the host.
      // It also validates the initial game state.
      allow create: if isAuthenticated()
                    && isUser(getIncomingGameData().hostId)
                    && getIncomingGameData().status == 'waiting'
                    && getIncomingGameData().players.size() == 1
                    && getIncomingGameData().players[0].id == request.auth.uid;

      // --- UPDATE ---
      // Updating a game is the most complex action. We break it down into specific game state transitions.
      allow update: if isAuthenticated() && (
                      isJoiningGame() ||
                      isLeavingGame() ||
                      isPlayingCard() ||
                      isDrawingCard() ||
                      isDeclaringWild() ||
                      isStartingRematch() ||
                      isClaimingWin()
                    );

      // --- DELETE ---
      // Only the host of the game can delete it.
      allow delete: if isAuthenticated() && isUser(getGameData().hostId);


      // --- UPDATE HELPER FUNCTIONS ---

      // A player can join if the game is waiting and not full.
      function isJoiningGame() {
        let game = getGameData();
        let incoming = getIncomingGameData();
        return game.status == 'waiting'
               && incoming.status == 'waiting'
               && incoming.players.size() == game.players.size() + 1
               && incoming.players.size() <= incoming.maxPlayers;
      }

      // A player can leave a game.
      function isLeavingGame() {
          let game = getGameData();
          let incoming = getIncomingGameData();
          // This rule allows a player to remove themselves from the player list.
          // It's a simplified version; a more robust one might handle host migration.
          return incoming.players.size() == game.players.size() - 1;
      }
      // A player can play a card if it's their turn.
      function isPlayingCard() {
        let game = getGameData();
        let incoming = getIncomingGameData();

        // CORRECTED: Check for 'playing' status, which is what gameService sets.
        // CORRECTED: Check the 'currentTurn' field directly against the user's ID.
        return game.status == 'playing'
              && isUser(game.currentTurn)
              && (
                    // Scenario 1: Normal card play, turn advances.
                    (incoming.currentTurn != game.currentTurn && incoming.discardPile.size() > game.discardPile.size()) ||
                    // Scenario 2: Player wins, status becomes 'finished'.
                    (incoming.status == 'finished' && incoming.winner == request.auth.uid) ||
                    // Scenario 3: Player plays an '8', status becomes 'choosing_suit', turn does NOT advance.
                    (incoming.status == 'choosing_suit' && incoming.currentTurn == game.currentTurn)
                  );
      }

      // A player can draw a card if it's their turn.
      function isDrawingCard() {
        let game = getGameData();
        let incoming = getIncomingGameData();
        return game.status == 'active'
               && isUser(game.players[game.currentTurnIndex].id)
               && incoming.deck.size() < game.deck.size() // Deck size must decrease
               && incoming.players[game.currentTurnIndex].hand.size() > game.players[game.currentTurnIndex].hand.size();
      }

      // A player can declare a wild suit after playing an Eight.
      function isDeclaringWild() {
        let game = getGameData();
        let incoming = getIncomingGameData();
        // This should happen on the same player's turn after they played an 8
        return game.status == 'active'
               && isUser(game.players[game.currentTurnIndex].id)
               && game.discardPile[0].rank == '8'
               && incoming.wildSuit != null && incoming.wildSuit != game.wildSuit;
      }

      // Allow players to signal they are ready for a rematch.
      function isStartingRematch() {
        let game = getGameData();
        let incoming = getIncomingGameData();
        return game.status == 'finished'
               && incoming.status == 'waiting' // Game resets to waiting
               && isUser(game.hostId); // Only host can trigger the rematch for now
      }

      // Allow a player to claim a win if another player disconnects.
      function isClaimingWin() {
        let game = getGameData();
        let incoming = getIncomingGameData();
        // This requires a disconnected player with a timestamp older than the grace period.
        // Let's assume a 'disconnected' field is added to the player object.
        // This logic would need to be more complex, likely involving cloud functions for time comparison.
        // For now, we'll allow a status change to 'finished' if a player is marked as disconnected.
        let disconnectedPlayer = game.players.filter(p => p.status == 'disconnected')[0];
        return disconnectedPlayer != null && incoming.status == 'finished';
      }
    }

    // Rules for the 'presence' collection in Realtime Database (conceptual)
    // Note: These rules would be in the Realtime Database rules, not Firestore.
    // This is just a placeholder to show the concept.
    // match /presence/{userId} {
    //   allow write: if isUser(userId);
    //   allow read: if isAuthenticated();
    // }
  }
}
